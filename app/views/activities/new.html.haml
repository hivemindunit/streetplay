- content_for :javascript do
  :javascript
    $('select.dropdown')
      .dropdown();
    $('#map').hide();
    $('#date').datepicker();
    function geolocate() {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function(position) {
          var geolocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };
          var circle = new google.maps.Circle({
            center: geolocation,
            radius: position.coords.accuracy
          });
          autocomplete.setBounds(circle.getBounds());
        });
      }
    }
    geolocate();
    var input = document.getElementById('address');
    var defaultBounds = new google.maps.LatLngBounds(new google.maps.LatLng(42.71422,-4.222666), new google.maps.LatLng(51.179343,8.47412));
    var autocomplete = new google.maps.places.Autocomplete(input);
    autocomplete.setBounds(defaultBounds);
    autocomplete.setTypes(['geocode']);
    handler = Gmaps.build('Google');
    map = handler.buildMap({ provider: {}, internal: {id: 'address-map'}}, function(){
    });
    geocoder = new google.maps.Geocoder();
    google.maps.event.addListener(autocomplete, 'place_changed', function() {
      address = document.getElementById('address').value;
      geocoder.geocode( { 'address': address}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          console.log(results);
          document.getElementById('latitude').value = results[0].geometry.location.lat()
          document.getElementById('longitude').value = results[0].geometry.location.lng()
          map.centerOn(results[0].geometry.location);
          var marker = new google.maps.Marker({
              map: handler.getMap(),
              position: results[0].geometry.location
          });
          handler.getMap().setZoom(15);
        } else {
          alert('Geocode was not successful for the following reason: ' + status);
        }
      });
    //show_submit_data(data);
    });
.ui.text.container
  .ui.segment
    %h1 Новое событие
    = form_for @activity, :html => {class: 'ui form'} do |f|
      - if @activity.errors.any?
        #error_explanation
          %h2
            = pluralize(@activity.errors.count, "error")
            возникли во время сохранения:
          %ul
            - @activity.errors.full_messages.each do |message|
              %li= message
      .field
        = f.label :activity_type_id, 'Вид спорта'
        = f.select(:activity_type_id, options_from_collection_for_select(@activity_types, :id, :title), {}, {class: 'ui dropdown'})
      .field
        = f.label :title, 'Наименование'
        = f.text_field :title
      .field
        = f.label :address, 'Адрес'
        = f.text_field :address, {id: 'address'}
        %div{style: 'width: 100%;'}
          %div{id: 'address-map', style: 'width: 100%; height: 200px;'}
      .field
        = f.label :date_time, 'Дата'
        = f.text_field :date_time, {id: 'date'}
      .field
        = f.label 'Длительность'
      .field
        = f.text_field :duration_h, { placeholder: 'часов'}
      .field
        = f.text_field :duration_m, { placeholder: 'минут'}
      .field
        = f.label :description, 'Описание'
        = f.text_area :description
      = f.hidden_field :latitude, { id: 'latitude'}
      = f.hidden_field :longitude, { id: 'longitude'}
      .actions
        = f.submit 'Создать', class: 'ui submit button'
        = link_to 'Вернуться', root_path
